name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run full test suite
        run: |
          pytest tests/ -v --cov=src/vedart --cov-report=xml
      
      - name: Verify version consistency
        run: |
          VERSION=$(python -c "from src.vedart.__version__ import __version__; print(__version__)")
          echo "Package version: $VERSION"
          
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag version: $TAG_VERSION"
            
            if [ "$VERSION" != "$TAG_VERSION" ]; then
              echo "Version mismatch: package=$VERSION tag=$TAG_VERSION"
              exit 1
            fi
          fi
      
      - name: Check CHANGELOG
        run: |
          VERSION=$(python -c "from src.vedart.__version__ import __version__; print(__version__)")
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "CHANGELOG.md missing entry for version $VERSION"
            exit 1
          fi

  build:
    name: Build Distribution
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
          ls -lh dist/
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: distributions
          path: dist/

  test-install:
    name: Test Installation
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download distributions
        uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist/
      
      - name: Install from wheel
        shell: bash
        run: |
          WHEEL=$(ls dist/*.whl)
          pip install "$WHEEL"
      
      - name: Test import
        run: |
          python -c "import vedart as veda; print(f'VedaRT {veda.__version__} installed successfully')"
      
      - name: Run basic test
        run: |
          python -c "import vedart as veda; result = veda.par_iter(range(10)).map(lambda x: x*2).sum(); assert result == 90"

  publish-testpypi:
    name: Publish to TestPyPI
    needs: test-install
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/vedart
    permissions:
      id-token: write
    
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist/
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

  publish-pypi:
    name: Publish to PyPI
    needs: test-install
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/vedart
    permissions:
      id-token: write
    
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  create-release:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Download distributions
        uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist/
      
      - name: Extract changelog
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Extract changelog section for this version
          awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '1d;$d' > release_notes.md
          
          if [ ! -s release_notes.md ]; then
            echo "Release notes for version $VERSION not found in CHANGELOG.md"
            echo "# Release $VERSION" > release_notes.md
            echo "See CHANGELOG.md for details." >> release_notes.md
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: VedaRT v${{ steps.changelog.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: false
          prerelease: false

  announce:
    name: Post-Release Announcements
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate announcement
        run: |
          cat << EOF > announcement.md
          # 🎉 VedaRT v${{ steps.version.outputs.version }} Released!
          
          We're excited to announce the release of VedaRT v${{ steps.version.outputs.version }}!
          
          ## Installation
          
          \`\`\`bash
          pip install --upgrade vedart
          \`\`\`
          
          ## What's New
          
          See the [full changelog](https://github.com/TIVerse/vedart/blob/master/CHANGELOG.md) for details.
          
          ## Resources
          
          - 📖 [Documentation](https://github.com/TIVerse/vedart/tree/master/docs)
          - 💡 [Examples](https://github.com/TIVerse/vedart/tree/master/examples)
          - 🐛 [Report Issues](https://github.com/TIVerse/vedart/issues)
          
          Thank you to all contributors! 🙏
          EOF
          
          cat announcement.md
      
      - name: Summary
        run: |
          echo "✅ Release v${{ steps.version.outputs.version }} published successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- PyPI: https://pypi.org/project/vedart/${{ steps.version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
